// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs3/publicshare/v0alpha/resources.proto

package publicsharev0alphapb

import (
	fmt "fmt"
	v0alpha "github.com/cs3org/go-cs3apis/cs3/storageprovider/v0alpha"
	types "github.com/cs3org/go-cs3apis/cs3/types"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Public share are relationships between a resource owner
// (usually the authenticated user) who grants permissions to a recipient (grantee)
// on a specified resource (resource_id). UserShares represents both user and groups.
// TODO(labkode): do we need to have  resource_type stored on the share?
// This is not needed if when getting the shares a stat operation is launched against the
// the storage provider.
type PublicShare struct {
	// REQUIRED.
	// Opaque unique identifier of the share.
	Id *PublicShareId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED.
	// The unlisted token to give public access
	// to the public share.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// REQUIRED.
	// Unique identifier of the shared resource.
	ResourceId *v0alpha.ResourceId `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// REQUIRED.
	// Permissions for the grantee to use
	// the resource.
	Permissions *PublicSharePermissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// REQUIRED.
	// Uniquely identifies the owner of the share
	// (the resource owner at the time of creating the share).
	// In case the ownership of the underlying resource changes
	// the share owner field MAY change to reflect the change of ownsership.
	Owner *types.UserId `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	// REQUIRED.
	// Uniquely identifies a principal who initiates the share creation.
	// A creator can create shares on behalf of the owner (because of re-sharing,
	// because belonging to special groups, ...).
	// Creator and owner often result in being the same principal.
	Creator *types.UserId `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	// REQUIRED.
	// Creation time of the share.
	Ctime *types.Timestamp `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// REQUIRED.
	// Last modification time of the share.
	Mtime *types.Timestamp `protobuf:"bytes,8,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// REQUIRED.
	// Determines if the public share is password protected or not.
	PasswordProtected bool `protobuf:"varint,9,opt,name=password_protected,json=passwordProtected,proto3" json:"password_protected,omitempty"`
	// OPTIONAL.
	// The expiration time for the public share.
	Expiration *types.Timestamp `protobuf:"bytes,10,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// OPTIONAL.
	// Display name for the shared resource (such as file, directory basename or any
	// user defined name).
	// The display name MAY be different than the actual resource basename.
	// This field is only useful for informational purposes, like for example,
	// setting the window title in a public share HTML page.
	DisplayName          string   `protobuf:"bytes,11,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicShare) Reset()         { *m = PublicShare{} }
func (m *PublicShare) String() string { return proto.CompactTextString(m) }
func (*PublicShare) ProtoMessage()    {}
func (*PublicShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_295bc0932a0a29ce, []int{0}
}

func (m *PublicShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicShare.Unmarshal(m, b)
}
func (m *PublicShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicShare.Marshal(b, m, deterministic)
}
func (m *PublicShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicShare.Merge(m, src)
}
func (m *PublicShare) XXX_Size() int {
	return xxx_messageInfo_PublicShare.Size(m)
}
func (m *PublicShare) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicShare.DiscardUnknown(m)
}

var xxx_messageInfo_PublicShare proto.InternalMessageInfo

func (m *PublicShare) GetId() *PublicShareId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PublicShare) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PublicShare) GetResourceId() *v0alpha.ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *PublicShare) GetPermissions() *PublicSharePermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *PublicShare) GetOwner() *types.UserId {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *PublicShare) GetCreator() *types.UserId {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *PublicShare) GetCtime() *types.Timestamp {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *PublicShare) GetMtime() *types.Timestamp {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *PublicShare) GetPasswordProtected() bool {
	if m != nil {
		return m.PasswordProtected
	}
	return false
}

func (m *PublicShare) GetExpiration() *types.Timestamp {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *PublicShare) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// The permissions for a share.
type PublicSharePermissions struct {
	Permissions          *v0alpha.ResourcePermissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PublicSharePermissions) Reset()         { *m = PublicSharePermissions{} }
func (m *PublicSharePermissions) String() string { return proto.CompactTextString(m) }
func (*PublicSharePermissions) ProtoMessage()    {}
func (*PublicSharePermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_295bc0932a0a29ce, []int{1}
}

func (m *PublicSharePermissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicSharePermissions.Unmarshal(m, b)
}
func (m *PublicSharePermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicSharePermissions.Marshal(b, m, deterministic)
}
func (m *PublicSharePermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicSharePermissions.Merge(m, src)
}
func (m *PublicSharePermissions) XXX_Size() int {
	return xxx_messageInfo_PublicSharePermissions.Size(m)
}
func (m *PublicSharePermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicSharePermissions.DiscardUnknown(m)
}

var xxx_messageInfo_PublicSharePermissions proto.InternalMessageInfo

func (m *PublicSharePermissions) GetPermissions() *v0alpha.ResourcePermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// A share id identifies uniquely a // share in the share provider namespace.
// A ShareId MUST be unique inside the share provider.
type PublicShareId struct {
	// REQUIRED.
	// The internal id used by service implementor to
	// uniquely identity the share in the internal
	// implementation of the service.
	OpaqueId             string   `protobuf:"bytes,2,opt,name=opaque_id,json=opaqueId,proto3" json:"opaque_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicShareId) Reset()         { *m = PublicShareId{} }
func (m *PublicShareId) String() string { return proto.CompactTextString(m) }
func (*PublicShareId) ProtoMessage()    {}
func (*PublicShareId) Descriptor() ([]byte, []int) {
	return fileDescriptor_295bc0932a0a29ce, []int{2}
}

func (m *PublicShareId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicShareId.Unmarshal(m, b)
}
func (m *PublicShareId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicShareId.Marshal(b, m, deterministic)
}
func (m *PublicShareId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicShareId.Merge(m, src)
}
func (m *PublicShareId) XXX_Size() int {
	return xxx_messageInfo_PublicShareId.Size(m)
}
func (m *PublicShareId) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicShareId.DiscardUnknown(m)
}

var xxx_messageInfo_PublicShareId proto.InternalMessageInfo

func (m *PublicShareId) GetOpaqueId() string {
	if m != nil {
		return m.OpaqueId
	}
	return ""
}

// The mechanism to identify a share
// in the share provider namespace.
type PublicShareReference struct {
	// REQUIRED.
	// One of the specifications MUST be specified.
	//
	// Types that are valid to be assigned to Spec:
	//	*PublicShareReference_Id
	//	*PublicShareReference_Token
	Spec                 isPublicShareReference_Spec `protobuf_oneof:"spec"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PublicShareReference) Reset()         { *m = PublicShareReference{} }
func (m *PublicShareReference) String() string { return proto.CompactTextString(m) }
func (*PublicShareReference) ProtoMessage()    {}
func (*PublicShareReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_295bc0932a0a29ce, []int{3}
}

func (m *PublicShareReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicShareReference.Unmarshal(m, b)
}
func (m *PublicShareReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicShareReference.Marshal(b, m, deterministic)
}
func (m *PublicShareReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicShareReference.Merge(m, src)
}
func (m *PublicShareReference) XXX_Size() int {
	return xxx_messageInfo_PublicShareReference.Size(m)
}
func (m *PublicShareReference) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicShareReference.DiscardUnknown(m)
}

var xxx_messageInfo_PublicShareReference proto.InternalMessageInfo

type isPublicShareReference_Spec interface {
	isPublicShareReference_Spec()
}

type PublicShareReference_Id struct {
	Id *PublicShareId `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type PublicShareReference_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

func (*PublicShareReference_Id) isPublicShareReference_Spec() {}

func (*PublicShareReference_Token) isPublicShareReference_Spec() {}

func (m *PublicShareReference) GetSpec() isPublicShareReference_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PublicShareReference) GetId() *PublicShareId {
	if x, ok := m.GetSpec().(*PublicShareReference_Id); ok {
		return x.Id
	}
	return nil
}

func (m *PublicShareReference) GetToken() string {
	if x, ok := m.GetSpec().(*PublicShareReference_Token); ok {
		return x.Token
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PublicShareReference) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PublicShareReference_Id)(nil),
		(*PublicShareReference_Token)(nil),
	}
}

func init() {
	proto.RegisterType((*PublicShare)(nil), "cs3.publicsharev0alpha.PublicShare")
	proto.RegisterType((*PublicSharePermissions)(nil), "cs3.publicsharev0alpha.PublicSharePermissions")
	proto.RegisterType((*PublicShareId)(nil), "cs3.publicsharev0alpha.PublicShareId")
	proto.RegisterType((*PublicShareReference)(nil), "cs3.publicsharev0alpha.PublicShareReference")
}

func init() {
	proto.RegisterFile("cs3/publicshare/v0alpha/resources.proto", fileDescriptor_295bc0932a0a29ce)
}

var fileDescriptor_295bc0932a0a29ce = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0x87, 0x97, 0xd2, 0x76, 0xed, 0x09, 0x7f, 0x34, 0xab, 0x54, 0x51, 0xb9, 0x29, 0x95, 0x60,
	0x15, 0x83, 0x76, 0xa2, 0x20, 0xae, 0xd7, 0x0a, 0xd1, 0x4a, 0x08, 0x82, 0xcb, 0x10, 0x42, 0x48,
	0x95, 0x6b, 0x1f, 0x98, 0xb5, 0x26, 0x36, 0x76, 0xba, 0xb1, 0x37, 0xe0, 0x39, 0xb8, 0x84, 0x37,
	0xe1, 0xa9, 0x50, 0x9c, 0x06, 0x52, 0xb6, 0x4e, 0xe3, 0x26, 0x4a, 0x7c, 0x3e, 0x7f, 0x39, 0xf1,
	0xf9, 0x05, 0x76, 0xb9, 0x1d, 0xf4, 0xf5, 0x72, 0xbe, 0x90, 0xdc, 0x1e, 0x31, 0x83, 0xfd, 0x93,
	0x7d, 0xb6, 0xd0, 0x47, 0xac, 0x6f, 0xd0, 0xaa, 0xa5, 0xe1, 0x68, 0x7b, 0xda, 0xa8, 0x44, 0x91,
	0x26, 0xb7, 0x83, 0x5e, 0x01, 0x5c, 0x71, 0xad, 0xbd, 0x54, 0x60, 0x13, 0x65, 0xd8, 0x67, 0xd4,
	0x46, 0x9d, 0x48, 0x81, 0x66, 0x93, 0xa4, 0x75, 0x3b, 0x85, 0x93, 0x33, 0x8d, 0x36, 0xbb, 0x66,
	0xcb, 0x9d, 0x9f, 0x65, 0xf0, 0x43, 0xa7, 0x9e, 0xa6, 0x6a, 0xf2, 0x14, 0x4a, 0x52, 0x04, 0x5e,
	0xdb, 0xeb, 0xfa, 0x8f, 0xef, 0xf5, 0x2e, 0x7e, 0x71, 0xaf, 0xb0, 0x61, 0x22, 0x68, 0x49, 0x0a,
	0xd2, 0x80, 0x4a, 0xa2, 0x8e, 0x31, 0x0e, 0x4a, 0x6d, 0xaf, 0x5b, 0xa7, 0xd9, 0x03, 0x79, 0x01,
	0x7e, 0xde, 0xc6, 0x4c, 0x8a, 0xe0, 0x9a, 0xb3, 0xde, 0x77, 0xd6, 0x7f, 0xda, 0xce, 0xcd, 0x74,
	0x85, 0x4f, 0x04, 0x05, 0xf3, 0xe7, 0x9e, 0x84, 0xe0, 0x6b, 0x34, 0x91, 0xb4, 0x56, 0xaa, 0xd8,
	0x06, 0x65, 0x27, 0xea, 0x5d, 0xa1, 0xbd, 0xf0, 0xef, 0x2e, 0x5a, 0x54, 0x90, 0x5d, 0xa8, 0xa8,
	0xd3, 0x18, 0x4d, 0x50, 0x71, 0xae, 0x1d, 0xe7, 0xca, 0x0e, 0xe6, 0xd0, 0xa2, 0x99, 0x08, 0x9a,
	0xd5, 0xc9, 0x1e, 0x6c, 0x73, 0x83, 0x2c, 0x51, 0x26, 0xa8, 0x6e, 0x42, 0x73, 0x82, 0x3c, 0x80,
	0x0a, 0x4f, 0x64, 0x84, 0xc1, 0xb6, 0x43, 0x1b, 0x05, 0xf4, 0xad, 0x8c, 0xd0, 0x26, 0x2c, 0xd2,
	0x34, 0x43, 0x52, 0x36, 0x72, 0x6c, 0xed, 0x32, 0xd6, 0x21, 0xe4, 0x11, 0x10, 0xcd, 0xac, 0x3d,
	0x55, 0x46, 0xcc, 0xd2, 0xb9, 0x21, 0x4f, 0x50, 0x04, 0xf5, 0xb6, 0xd7, 0xad, 0xd1, 0x9d, 0xbc,
	0x12, 0xe6, 0x05, 0xf2, 0x04, 0x00, 0xbf, 0x6a, 0x69, 0x58, 0x22, 0x55, 0x1c, 0xc0, 0x25, 0xfe,
	0x02, 0x47, 0xee, 0xc2, 0x75, 0x21, 0xad, 0x5e, 0xb0, 0xb3, 0x59, 0xcc, 0x22, 0x0c, 0x7c, 0x37,
	0x4a, 0x7f, 0xb5, 0xf6, 0x8a, 0x45, 0xd8, 0x39, 0x86, 0xe6, 0xc5, 0x87, 0x4b, 0xde, 0xac, 0x4f,
	0x28, 0x0b, 0x50, 0xff, 0x2a, 0xa3, 0xde, 0x34, 0xa2, 0xce, 0x43, 0xb8, 0xb1, 0x16, 0x34, 0x72,
	0x07, 0xea, 0x4a, 0xb3, 0x2f, 0x4b, 0x17, 0xa6, 0x2c, 0x68, 0xb5, 0x6c, 0x61, 0x22, 0x3a, 0x0a,
	0x1a, 0x05, 0x9a, 0xe2, 0x27, 0x34, 0x18, 0x73, 0x24, 0xcf, 0xfe, 0x3b, 0xd0, 0xe3, 0x2d, 0x17,
	0xe9, 0xe6, 0x5a, 0xa4, 0xc7, 0x5b, 0xab, 0x50, 0x0f, 0xab, 0x50, 0xb6, 0x1a, 0xf9, 0xf0, 0x9b,
	0x07, 0x2d, 0xae, 0xa2, 0x0d, 0xca, 0xe1, 0xcd, 0xfc, 0xfb, 0x6c, 0x3a, 0x17, 0x15, 0x7a, 0x1f,
	0x1a, 0xe7, 0x29, 0x3d, 0xff, 0x5e, 0xba, 0x35, 0x1a, 0xbe, 0x7e, 0x1f, 0x1e, 0x0e, 0x5f, 0x4e,
	0x46, 0xd3, 0xf1, 0x01, 0x7d, 0xfe, 0xa3, 0xd4, 0x1c, 0x4d, 0x07, 0xc5, 0x96, 0xde, 0xed, 0x1f,
	0xa4, 0xf0, 0x2f, 0x57, 0xf8, 0x78, 0xbe, 0x30, 0xaf, 0xba, 0x7f, 0x79, 0xf0, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x5d, 0xc9, 0x0d, 0xaf, 0x52, 0x04, 0x00, 0x00,
}
